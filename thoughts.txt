// Attempt 1 -> this is flawed as you cannot guarantee that there will be a cell with only one possible input number
// create a new n x n array
// for each array cell, store a dictionary that has possible input numbers
// after storing the input numbers, go through the array and if any of the 
// cells have only one possible input number then change that value in the original numbers array.
// repeat this until all of the 0's in the original array are filled

// Attempt 2 -> think like a human (code is quite verbose)
// initialise a dictionary that has numbers 1 to 9 as the key and an array as the values
// (the array value will store the positions of where a specific number is located)
// e.g. { 1: [[1, 1], [2, 3], ...], 2:[...], ... }
// loop from numbers 1 to 9
    // if the current position equals the current number,
        // add it's position into the associated key's array

// initialise a new 9x9 2d array
// loop from numbers 1 to 9
    // loop through the 2d numbers array and for each position
        // mark 1 if the number can be placed
        // otherwise mark 0

// helper functions for this condition will be: validRowPos, validColPos, validSquarePos,
// check if the current position is already filled (not 0)
// (each of which will scan its designated area and return true or false)
// all conditions must be satisfied for the number to be placed.

// validRowPos(2darray, rowIndex, target)
// return true if the target is not contained in the row
// false otherwise

// validColPos(2darray, colIndex, target)
// return true if the target is not contained in the col
// false otherwise

// validSquarePos(2darray, rowIndex, colIndex, target) -> 
// return true if the target is not contained in the square
// false otherwise

// findSquare(2darray, rowIndex, colIndex)
// switch case scenario based off 9 possible squares to return depending on row and col position
// e.g. square 1 would be
// case: (rowIndex <= 2 && rowIndex >= 0) && (colIndex <= 2 && colIndex >= 0)
// return squareSection(startPos=[0,0], endPos=[2,2])
// [
//     0, 0, 0,
//     7, 1, 0,
//     0, 0, 0,
// ]

// Example
// [ // original array
//     [0, 0, 0,  0, 0, 0,  6, 0, 5],
//     [7, 1, 0,  0, 0, 0,  0, 9, 0],
//     [0, 0, 0,  1, 8, 0,  2, 0, 0],

//     [5, 0, 2,  0, 0, 0,  1, 0, 0],
//     [0, 0, 0,  9, 2, 4,  0, 0, 0],
//     [0, 0, 6,  0, 0, 0,  7, 0, 4],

//     [0, 0, 8,  0, 4, 3,  0, 0, 0],
//     [0, 9, 0,  0, 0, 0,  0, 3, 1],
//     [3, 0, 7,  0, 0, 0,  0, 0, 0]
// ]
// [ // array for possible positions for 1
//     [0, 0, 0,  0, 0, 0,  0, 1, 0],
//     [0, 0, 0,  0, 0, 0,  0, 0, 0],
//     [0, 0, 0,  0, 0, 0,  0, 0, 0],

//     [0, 0, 0,  0, 0, 0,  0, 0, 0],
//     [1, 0, 1,  0, 0, 0,  0, 0, 0],
//     [1, 0, 0,  0, 1, 1,  0, 0, 0],

//     [1, 0, 0,  0, 0, 0,  0, 0, 0],
//     [0, 0, 0,  0, 0, 0,  0, 0, 0],
//     [0, 0, 0,  0, 1, 1,  0, 0, 0]
// ]
// loop through the array just generated
    // if the value is not 0(false)
        // if there is only a single 1 (true) value for that square,
            // mark the original array with the valid position of the current number

// continue onto the next number and repeat the above process

// after reaching the last number, it is likely that there are still positions that are 0
// i.e. unfilled positions. As a result, we need to have a condition to check
// if there are any zeros in the array, then reset the target back to 1 and repeat

// Attempt 3 -> brute force recursive solution
// loop through the 2d array
    // if there is an empty space
        // loop from 1 to 9
            // if it is possible to place the current number
                // place the number
                // recurse the entire function again
                // * reaching this part means that an incorrect choice was made
                // as a result, backtrack by resetting the position value (back to 0)
        // finishing this loop (1 to 9) means that no number was able to satisfy 
        // the current position. As a result we return which sends us back to *

// finishing looping the entire array means that a potential solution has been found
// return it

// to determine whether it is possible to place the current number,
// need helper to check validRow, validCol, validSquare 